//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gf.Frs.MT940Loader.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FRSMT940LoaderContext : DbContext
    {
        public FRSMT940LoaderContext()
            : base("name=FRSMT940LoaderContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FileContent> FileContents { get; set; }
        public virtual DbSet<Load> Loads { get; set; }
        public virtual DbSet<LoadMetaData> LoadMetaDatas { get; set; }
        public virtual DbSet<LoadType> LoadTypes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MT940Balance> MT940Balance { get; set; }
        public virtual DbSet<MT940CustomerStatement> MT940CustomerStatement { get; set; }
        public virtual DbSet<MT940CustomerStatementTransaction> MT940CustomerStatementTransaction { get; set; }
        public virtual DbSet<MT940Load> MT940Load { get; set; }
        public virtual DbSet<Source> Sources { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<LoadStatus> LoadStatus { get; set; }
        public virtual DbSet<ServiceLog> ServiceLogs { get; set; }
    
        public virtual int WriteLog(Nullable<int> eventID, Nullable<int> priority, string severity, string title, Nullable<System.DateTime> timestamp, string machineName, string appDomainName, string processID, string processName, string threadName, string win32ThreadId, string message, string formattedMessage, ObjectParameter logId)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var severityParameter = severity != null ?
                new ObjectParameter("Severity", severity) :
                new ObjectParameter("Severity", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("Timestamp", timestamp) :
                new ObjectParameter("Timestamp", typeof(System.DateTime));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var appDomainNameParameter = appDomainName != null ?
                new ObjectParameter("AppDomainName", appDomainName) :
                new ObjectParameter("AppDomainName", typeof(string));
    
            var processIDParameter = processID != null ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var threadNameParameter = threadName != null ?
                new ObjectParameter("ThreadName", threadName) :
                new ObjectParameter("ThreadName", typeof(string));
    
            var win32ThreadIdParameter = win32ThreadId != null ?
                new ObjectParameter("Win32ThreadId", win32ThreadId) :
                new ObjectParameter("Win32ThreadId", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var formattedMessageParameter = formattedMessage != null ?
                new ObjectParameter("FormattedMessage", formattedMessage) :
                new ObjectParameter("FormattedMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteLog", eventIDParameter, priorityParameter, severityParameter, titleParameter, timestampParameter, machineNameParameter, appDomainNameParameter, processIDParameter, processNameParameter, threadNameParameter, win32ThreadIdParameter, messageParameter, formattedMessageParameter, logId);
        }
    
        public virtual int WriteServiceLog(string machineName, string siteName, Nullable<System.DateTime> logged, string level, string userName, string application, string message, string logger, string properties, string serverName, string port, string sessionId, Nullable<int> threadId, string callerDetails, string requestDump, string responseDump, string url, Nullable<bool> https, string serverAddress, string remoteAddress, string callSite, Nullable<byte> partitionKey, string exception)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("siteName", siteName) :
                new ObjectParameter("siteName", typeof(string));
    
            var loggedParameter = logged.HasValue ?
                new ObjectParameter("logged", logged) :
                new ObjectParameter("logged", typeof(System.DateTime));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var propertiesParameter = properties != null ?
                new ObjectParameter("properties", properties) :
                new ObjectParameter("properties", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("serverName", serverName) :
                new ObjectParameter("serverName", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var threadIdParameter = threadId.HasValue ?
                new ObjectParameter("ThreadId", threadId) :
                new ObjectParameter("ThreadId", typeof(int));
    
            var callerDetailsParameter = callerDetails != null ?
                new ObjectParameter("CallerDetails", callerDetails) :
                new ObjectParameter("CallerDetails", typeof(string));
    
            var requestDumpParameter = requestDump != null ?
                new ObjectParameter("RequestDump", requestDump) :
                new ObjectParameter("RequestDump", typeof(string));
    
            var responseDumpParameter = responseDump != null ?
                new ObjectParameter("ResponseDump", responseDump) :
                new ObjectParameter("ResponseDump", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var httpsParameter = https.HasValue ?
                new ObjectParameter("https", https) :
                new ObjectParameter("https", typeof(bool));
    
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("serverAddress", serverAddress) :
                new ObjectParameter("serverAddress", typeof(string));
    
            var remoteAddressParameter = remoteAddress != null ?
                new ObjectParameter("remoteAddress", remoteAddress) :
                new ObjectParameter("remoteAddress", typeof(string));
    
            var callSiteParameter = callSite != null ?
                new ObjectParameter("callSite", callSite) :
                new ObjectParameter("callSite", typeof(string));
    
            var partitionKeyParameter = partitionKey.HasValue ?
                new ObjectParameter("PartitionKey", partitionKey) :
                new ObjectParameter("PartitionKey", typeof(byte));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteServiceLog", machineNameParameter, siteNameParameter, loggedParameter, levelParameter, userNameParameter, applicationParameter, messageParameter, loggerParameter, propertiesParameter, serverNameParameter, portParameter, sessionIdParameter, threadIdParameter, callerDetailsParameter, requestDumpParameter, responseDumpParameter, urlParameter, httpsParameter, serverAddressParameter, remoteAddressParameter, callSiteParameter, partitionKeyParameter, exceptionParameter);
        }
    }
}
