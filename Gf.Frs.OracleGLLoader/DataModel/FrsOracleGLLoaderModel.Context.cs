//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gf.Frs.OracleGLLoader.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FrsOracleGLLoaderContext : DbContext
    {
        public FrsOracleGLLoaderContext()
            : base("name=FrsOracleGLLoaderContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryLog> CategoryLogs { get; set; }
        public virtual DbSet<FileContent> FileContents { get; set; }
        public virtual DbSet<FiscalYear> FiscalYears { get; set; }
        public virtual DbSet<Load> Loads { get; set; }
        public virtual DbSet<LoadMetaData> LoadMetaDatas { get; set; }
        public virtual DbSet<LoadType> LoadTypes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<OracleGLLoad> OracleGLLoads { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<OracleGLEntry> OracleGLEntries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<LoadStatus> LoadStatus { get; set; }
    
        public virtual int WriteLog(Nullable<int> eventID, Nullable<int> priority, string severity, string title, Nullable<System.DateTime> timestamp, string machineName, string appDomainName, string processID, string processName, string threadName, string win32ThreadId, string message, string formattedMessage, ObjectParameter logId)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var severityParameter = severity != null ?
                new ObjectParameter("Severity", severity) :
                new ObjectParameter("Severity", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("Timestamp", timestamp) :
                new ObjectParameter("Timestamp", typeof(System.DateTime));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var appDomainNameParameter = appDomainName != null ?
                new ObjectParameter("AppDomainName", appDomainName) :
                new ObjectParameter("AppDomainName", typeof(string));
    
            var processIDParameter = processID != null ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var threadNameParameter = threadName != null ?
                new ObjectParameter("ThreadName", threadName) :
                new ObjectParameter("ThreadName", typeof(string));
    
            var win32ThreadIdParameter = win32ThreadId != null ?
                new ObjectParameter("Win32ThreadId", win32ThreadId) :
                new ObjectParameter("Win32ThreadId", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var formattedMessageParameter = formattedMessage != null ?
                new ObjectParameter("FormattedMessage", formattedMessage) :
                new ObjectParameter("FormattedMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteLog", eventIDParameter, priorityParameter, severityParameter, titleParameter, timestampParameter, machineNameParameter, appDomainNameParameter, processIDParameter, processNameParameter, threadNameParameter, win32ThreadIdParameter, messageParameter, formattedMessageParameter, logId);
        }
    }
}
